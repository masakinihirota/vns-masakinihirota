[B! 図書館] AIと図書館をつなぐ「カーリル for AI」の運用を開始します – カーリルのブログ
https://b.hatena.ne.jp/entry/s/blog.calil.jp/2025/10/forai.html



----------------------------------------

# 全体要件定義書

価値観サイト

※基本的に重要項目以外は
別ファイルに記載

----------------------------------------

# 関連図

## 画面遷移図

0017 図関連\ER図-画面遷移図.puml

## データフロー設計書

0017 図関連\ER図データフロー設計書.puml
0017 図関連\データフロー設計書.md



----------------------------------------

# 開発ドキュメントのファイル一覧

## ドキュメントの種類

*-01-* 要件定義書
*-02-* 設計書
*-03-* テスト計画書

## 機能要件 優先順位の種類

優先度: 高、中、小

### 優先度:大

0012-アクセス権限
0014-RBAC グループと役割
0020-データベース設計
0022-役割
0024-RBAC マトリクス図
0026-テーブル定義書
0050-URL
0054-画面UI
0056-API設計書
0100-ルートアカウント
0110-ユーザープロフィール
0200-非機能要件
0202-セキュリティ設計書
0300-作品登録
0310-カテゴリとジャンル
0312-価値観のカテゴリ
0314-価値観登録
0320-タグ
0400-グループ関連
0500-評価
0510-スキル登録
0520-リスト
0600-マッチング
0610-自動マッチング
0620-手動マッチング
0700-メニュー

### 優先度:中

0710-通知
0720-検索、履歴
0800-チェーン
0810-マンダラチャート
0900-管理機能
1000-国際化
1002-国際化多言語対応設計書
1002-国際化多言語対応テスト計画書

### 優先度:小

1010-スマホ対応
1100-コメント
1110-見守り
1120-ペナルティ
1200-レコメンド
1210-チュートリアル
1400-広告関連
1410-サブスク



----------------------------------------

## 1. 概要

VNSのmasakinihirotaというWebサービスを作ります。

価値観でつながるVNS（Value Network Service）を作成します。

SNSがSocial Network Serviceで社会的なつながりを作るサービスであるならば、
VNSはValue Network Serviceで価値観でのつながりを作るサービスです。

自身の価値観をベースにマッチングしてグループを作ります。
個人を特定する個人情報は使いません。



### 1.1 目的・背景

このウェブサービスは、ユーザーが特定の活動を行う人や、特定の属性を共有する人を見つけることを支援するプラットフォームです 。

1.  価値観共有の支援
    ユーザーが同じ価値観、趣味、仕事、悩み、環境を共有する人を探すことを支援します 。特に同じ価値観を持つ人達と一緒にインターネットという情報の洪水の中から真っ先に価値のあるものを拾い上げます。

2.  活動的なつながりの創出
    一緒に遊んだり、仕事をする人、婚活する人、就活する人、その他何かをする人を探す手助けをします 。少数グループから次第に大きくしていきます。

3.  ネット上の自己紹介としての役割
    このサービスは、名刺や履歴書、経歴書の代替になるものを作ることを目指しています 。

4. インターネット上に、安心・安全なオアシスを作ります。

5. 幸福追求権（日本国憲法:第13条）と表現の自由（日本国憲法:第21条）が衝突する場合、かならず幸福追求権を優先します。

6. クリエイターの保護: この幸福追求権の優先は、クリエイターを優先することを意味し、コンテンツを創造するクリエイターの権利と利益を最優先します。

7. 幸福追求権の実施方法はリーダーの判断に任されます。リーダーは自分のグループ内での判断が必要な時に自由に判断を行うことが出来ます。

8. 似た価値観の人が褒めている作品の中から、自分は知らない作品を見つけます。

9. チェーン:作品との関連作品をつなげてネット上の作品の価値を高めます。

10. 役割: 攻撃的な世界となりがちなSNSが「剣」の役割を担うとするならば、VNSは個人を尊重することで人を守る「盾」の役割を担うことを目指します。



### 1.1.1 将来的な目標

*   平和の構築: インターネット上の平和を作り上げること 。
*   影響力の拡大: ノーベル平和賞を貰えるぐらい多くの人に使ってもらうようなシステムを作ることを目標としています 。
*   社会貢献: 戦争を小さくすることにも貢献したいという決意が示されています 。

masakinihirotaは、インターネット上の平和を作り上げ、ノーベル平和賞を貰えるぐらいに平和に多くの人に使ってもらうようなシステムを作ることを将来の目標としています。また、戦争を小さくすることにも貢献出来るようにします。



### 1.2 アプリケーション名

VNS（Value Network Service）
masakinihirota (真っ先に拾った)

https://vns.blue/
https://masakinihirota.com/



### 1.3 対象ユーザー

* 同じ価値観を持つ人となにかしらの関係を作ること 。
* 自分で作ったものを見てもらうこと 。
* 遊び、仕事、婚活、終活、その他の仲間を探すこと 。
* パートナーを探すこと（婚活を含む） 。
* 表現の自由でのヘイト発言等に苦しむユーザー
* 共通の価値観を持つ仲間を見つけたいユーザー。
* 自身の価値観に合う仕事仲間やパートナーを探したいユーザー。
* 相手がどんな価値感を持っているか知りたいユーザー
* 自分から見た相手はどんな価値感を持っているかを公表したいユーザー
* 属性情報（年齢、性別、経歴など）に囚われず、内面的な価値観で繋がりたいユーザー。

利用環境
PC(優先)
スマホ



### 1.4 キーワード
	VNS（Value Network Service）
	オアシス宣言
	人間宣言
	千の仮面
	ユーザープロフィール、プロフィール、プロフ
	シュレディンガー猫主義
	絶対相対評価
	Tier評価
	マッチング
	ボトムアップ方式
	階層的なグループシステム
	友好都市（Friendship City）
	ポイントシステム
	信頼継続日数(ネガティブな発言をしていない期間)

詳細は、用語集をご覧ください。



### 1.5 スコープ（範囲）  今回の開発で実現する機能、システム化の範囲、対象外とする範囲を明確にします。

優先度:大 を開発します。



## 2. 業務要件

### 2.1. 業務フロー  アプリ導入後の新しい業務の流れを図（業務フロー図）で示します。  システム化する部分を明確に。

#### 2.1.1. サービスの開始と認証フェーズ

| ステップ | 概要 | 詳細（処理/機能） | 参照元 |
| :--- | :--- | :--- | :--- |
| **1.1. サイトアクセス** | ユーザーが「masakinihirota」にアクセスします。 | - | |
| **1.2. 認証確認** | ユーザーの認証状態を確認します。 | - |  |
| **1.3. 【非認証】匿名体験** | 認証なしでサービスを体験します。 | **匿名のユーザープロフィール**を作成し、マッチング結果や登録作品の閲覧が可能です 。データは長期間保存されません 。 | |
| **1.4. 【認証】ログイン/登録** | OAuth認証（Google、GitHub等）を利用してアカウントを登録・ログインします。 | **ユーザー登録**を優先度：高として実装します 。複数のOAuth認証は信頼度を上げます 。 | |



#### 2.1.2. ルートアカウント作成と初期設定フェーズ (オンボーディング)

| ステップ | 概要 | 詳細（処理/機能） | 参照元 |
| :--- | :--- | :--- | :--- |
| **2.1. ルートアカウント作成** | 認証後、ユーザーに一意の「ルートアカウント」が付与されます。 | **1ユーザーにつき1つ**。IDにはUUID v4を使用します 。 | |
| **2.2. 初期設定（重要項目）**| ルートアカウントのベースとなる基本情報を入力します。 | モーダルウィンドウで表示され、**居住地域（地球3分割）**、**母語**、**生誕世代**、**オアシス宣言への宣誓**などの重要項目を入力 。これらの情報は基本的に**後から変更できません**（全データリセット時のみ可）。 | |
| **2.3. 初期ポイント付与** | 初回ボーナスとして、初期ポイントと信頼継続日数が付与されます。 | 初回ボーナスとして初期ポイント3000（通常1000）、信頼継続日数30（通常0）が付与されます。 | |



#### 2.1.3. ユーザープロフィール設定フェーズ (優先度:高)

このフェーズでは、認証を終えたユーザーが「ルートアカウント」の下に、活動するための「ユーザープロフィール」を作成し、初期設定を行います。

| No. | 項目名 | 要件の概要と目的 | 詳細（機能・データ） | 参照元 |
| :--- | :--- | :--- | :--- | :--- |
| **3.1. プロフィール作成** | **千の仮面** | 1つのルートアカウントで複数の活動側面を持つことを可能にする 。名刺、履歴書、経歴書の代替となる。 | **【上限】** 認証済みアカウントの場合、無料アカウントは**5つまで** （将来的に有料アカウントは10個まで拡張可能 ）。 | |
| **3.1.2. 目的設定** | **マッチング起点** | プロフィールの目的（仕事、遊び、婚活など）を設定し、目的が合うユーザー同士がマッチング対象となる 。 | 1つのユーザープロフィールに対し、1つまたは複数の目的を設定可能 。 | |
| **3.1.3. 種類選択** | **多面性の表現** | 他者から見た自分という複数の視点（**シュレディンガー猫主義**）を許容する 。 | **【種類】** 本人（匿名/実名/認証済み実名）、インタビュー、他人から見た人物像 。ただし、インタビューや他人視点のプロフィールはリーダーになれない 。 |  |
| **3.2. グループ自動作成** | **ボトムアップの起点** | プロフィール作成と同時に、そのユーザーをリーダーとする最小のグループを自動で生成する。 | 作成者は自動的にグループの**リーダー**となる 。メンバーリストは初期は1人（自分自身）から開始される 。グループ規模は1～10人程度を想定 。 | |
| **3.4. 価値観の回答** | **価値観の紐付け** | ユーザーの価値観を表明し、マッチングの基礎データとする。 | ユーザープロフィールに紐付けられる。ルートアカウント作成時に入力した**基本価値観**に加え、リストからお題を選んで回答する 。 | |
| **3.5. スキル・チャート登録** | **仕事・成長目標** | スキル情報を登録し、仕事の仲間探しやキャリアアップの判断材料とする。 | **自分のスキル**と**相手に要求するスキル**の2種類を登録し、マッチングに利用する 。**マンダラチャート**はスキル専用の目標達成ツールとして利用される（優先度:小） 。 | |
| **3.6. 外部連携** | **自己紹介の充実** | ユーザープロフィールの信頼性や活動を補完するため、外部SNSアカウントや連絡先を登録する。 | **SNSアカウント**（YouTube, X.comなど）を複数登録可能 。**メールアドレス**も複数登録可能 。 | |
| **3.7. データ公開形式**| **情報提供の多様性** | ユーザープロフィールの情報を目的別に切り替えて表示する。 | 名刺、履歴書、フルの**表示切替**機能を提供する。ユーザープロフィールを**Markdown形式**で表示およびエクスポート可能とする 。 | |



#### 2.1.4. 作品登録フェーズ (優先度:高)

このフェーズでは、作品マスタへの登録（作品カタログの拡充）と、それを個々のユーザープロフィールに紐付け、評価を行う要件を定義します。

| No. | 項目名 | 要件の概要と目的 | 詳細（機能・データ） | 参照元 |
| :--- | :--- | :--- | :--- | :--- |
| **4.1. 作品登録** | **カタログの作成** | ユーザーが話題にできる作品をシステムに登録する。登録はメインメニューの一つとして独立している 。 | **【登録種別】** ①**公式登録**（管理者のみ、優先度:高）、②**ユーザー登録**（全ユーザー可能、優先度:小）。ユーザー登録作品は、承認されるまで「登録待機中作品リスト」で待機する 。その間は自分のグループでのみ閲覧可能 |  |
| **4.1.2. 作品情報** | **基本データの定義** | 作品を特定し、マッチングの条件や会話の話題として機能させるための基礎情報。 | タイトル、作家名（複数可）、発売年代、カテゴリ（公式管理）、ジャンル（公式管理、複数選択可）、紹介URL、アフィリエイトURL 。<br>**【作品の大きさ】** 短編、中編、長編、ネーバーエンディングなどの分類を設定 。 |  |
| **4.2. プロフィールへの追加** | **作品の紐付け** | ユーザーが自分の好きな作品をプロフィールに取り込む。 | 登録済みの作品リストから選択、または新規登録した作品をプロフィールに追加する 。 |  |





#### 2.1.5. 作品評価フェーズ (優先度:高)

| **4.1. 状態の付与** | **評価の時制管理** | 作品に対する現在の関わり方を明確にする 。 | 以下の3つの状態のいずれかに作品を登録する 。<br>1. **今**（現在進行形、ネタバレ無し）<br>2. **人生**（評価確定、ネタバレ有り）<br>3. **未来**（予定・期待、ネタバレ無し） |  |
| **4.2. ティア評価の付与** | **価値観の強度表現** | ユーザーの作品に対する「好き」の度合いを絶対相対評価で明確にする 。 | **【評価方法】** ティア方式（絶対相対評価）。<br>**【評価段階】** Tier 1 / Tier 2 / Tier 3 / 普通 or 自分に合わなかった。<br>評価は**3段階（Tier1-3）**と**それ以外（普通/合わない）**に分けることで、マッチングをしやすくする。 | |
| **4.3. その他評価** | **二次的な評価** | 作品に対する賛同や感謝を示す。 | 「スキ（ハートマーク）」（自分用のリスト）と「拍手」（みんなが見る用）のボタンを設置する 。拍手はポイントを消費する 。 |  |



#### 2.1.6. マッチングと繋がり形成フェーズ

| ステップ | 概要 | 詳細（処理/機能） | 参照元 |
| :--- | :--- | :--- | :--- |
| **4.1. マッチング実行** | ユーザーは「マッチングボタン」を押して、自分に合う相手を探します。 | 1日1回 自動でマッチングが実行されます。手動マッチングでは、**ベーシックの価値観をすべて回答**している必要があります 。 | |
| **4.2. 候補者の算出** | システムはアルゴリズムに基づき、類似性の高いユーザーを抽出します。 | **作品のティア評価（Tier 1/2/3）**や**価値観の一致度**を点数化し、スコア/ランクを表示。重要価値観のみでマッチングを絞ることも可能です 。 | |


#### 2.1.7. サイト運営と活動制御フェーズ

| ステップ | 概要 | 詳細（処理/機能） | 参照元 |
| :--- | :--- | :--- | :--- |
| **5.1. ポイントの消費/回復** | ユーザーの行動はポイントによって制御されます。 | ポイントはルートアカウントで一元管理され 。マッチング、コメント記入、拍手、グループ/まとまりの作成、メンバーへのペナルティなどで消費されます 。ポイントは24時間でMAXの50%分が自動で補充されます 。 | |
| **5.2. ルール遵守** | 全ユーザーは「オアシス宣言」の遵守が求められます。 | オアシス宣言の宣誓は初期設定で必須 。ネガティブな発言やヘイトスピーチは禁止。 | |
| **5.3. ペナルティ処理** | ルール違反があった場合、ペナルティが課されます。 | ペナルティはグループのリーダーやそれ以上のまとまりのリーダーがメンバーに対して課すことが可能 。ペナルティ（イエロー/レッドカード、ミュート、リーブなど）は、**連続経過日数ポイント**をリセットする形で機能し、活動参加基準に影響します 。 | |
| **5.4. コンテンツ連鎖 (チェーン)** | 作品や話題の関連性、信憑性を繋げます。 | カテゴリやジャンルを超えて、作品や情報を鎖のようにつなげる機能 。 | |





#### 2.1.8. グループ

グループ構造と権限の定義

VNS「masakinihirota」における組織・体制は、「ユーザー側の役割」と「開発・運営側の役割」の大きく二つに分類されます。

移動の自由
どのユーザーも自由にグループ間を移動できます。
グループの選択がユーザーの方針に任されています。



##### 2.1.8.1. グループの種類

1種類の集合あたり最大10人～

	Group or Home (自分の家=家族用)	10
	Neighborhood (ネイバーフッド) 近所	10
	Village (ヴィレッジ)村	10
	Town (タウン)	町	10
	City (シティ)	市	10
	Metropolis(メトロポリス) 大都市圏	10
	State (ステート)	州	10
	Country(カントリー)	10
	Continent (コンティネント)	大陸	10
	Alliance 連合、連盟 (複数大陸)	10
	an earth ある一つの惑星	10
	Solar System (太陽系、恒星とその惑星)	10億
	Star Cluster (恒星のグループ)
	Galaxy (恒星・星団の巨大な集まり)
	Local Group (銀河のグループ、局所銀河群)
	Supercluster (銀河群・銀河団の巨大な集まり、超銀河団)
	Observable Universe (観測可能な宇宙全体)

を構成できます。


##### 2.1.8.2. トップダウン方式とボトムアップ方式

AIや計算によって即座に新しいグループが出来上がります。

AIの力を借りて
グループの結合（＝それ以上のまとまり単位）で
ヘイト発言などを繰り返すグループを
即座に切り分けられます。

価値観が対立するグループ同士は同じグループに入れないように自動的にグループの結合の調整が行われます。

ボトムアップ方式の採用により
問題が短時間で即座に低料金で解決できます。

このVNSのボトムアップ方式は
グループのリーダを設定し
少数のグループでの運営し拡大していくのを基本としています。

VNSはボトムアップ方式
SNSはトップダウン方式










| **4.3. 関係性の選択** | ユーザーは候補者に対し、希望する関係性を選択します。 | **ウォッチ**（見るだけ、相手に非通知）、**フォロー**（連絡可能、相手に通知）、プレパートナー(パートナー候補)、パートナー(相互に意思を確認した状態)の4種類があります 。 | |
| **4.4. グループメンバー追加** | フォローを選択し、相手がフォローバックすると相互フォローとなります。 | マッチした相手はリーダーのグループにメンバーとして追加されます 。グループ内では共通の価値観やお気に入りの作品リストが共有されます 。 | |
| **4.5. それ以上のまとまり形成** | グループのリーダーは、複数のグループをまとめ、より大きなコミュニティを形成できます。 | **ボトムアップ方式**を採用。参加グループのリーダー同士で構成され、階層的に**村 (Village)**、**町 (Town)**、**市 (City)**などへと拡大します。 | |






---

### 2. Webアプリケーションにおける設計方針（データ層とアクセス制御）

この構造を実現するために、Supabase (PostgreSQL) と Next.js を使用したWebアプリ設計では、主に以下の要素を連携させます。

#### 2.1. データベーステーブル設計の基本

別ファイルに記載

#### 2.2. アクセス権限（RLS）の実装

別ファイルに記載

#### 2.3. Webアプリケーション層での制御

データベース層のRLSに加え、クライアントサイド（Next.js/React）およびサーバーアクション（Next.js Server Actions）のレイヤーでも制御が必要です。

*   **UIの表示制御:**
    リーダーのみに表示すべき機能（例: メンバー追加/削除ボタン、グループルール設定メニュー）は、ユーザーの役割情報を確認した上でクライアント側で出し分けます。
*   **サーバー側での最終検証:**
    ユーザーがアクション（例: メンバー削除）を試みた際、サーバー側（Next.jsのServer Actionsなど）で、再度そのユーザーがデータベース上の正式なリーダーであるかを検証します。これにより、クライアントの改ざんを防ぎます 。

この設計により、グループ内の全員がデータ上は「メンバー」という集合体に属しつつも、「リーダー」という役職によって特別な権限が付与されるという構造が、安全かつ柔軟に実現されます。


### 2.2 組織・体制  アプリの利用部門、担当者、権限などを定義します。


#### 2.2.8.1. ユーザー側の役割

| 役割（ロール） | 概要と立ち位置 | 主な権限（力）と責務 | 関連する管理指標 |
| :--- | :--- | :--- | :--- |
| **匿名認証ユーザー** (ゲスト/新規ユーザー) |  | 公開情報（説明、公式作品リスト）の閲覧。登録、ログイン（扉を開く）。匿名認証でユーザープロフィールを作成し、マッチング結果や登録作品の閲覧・編集（データ保存なし）が可能。 | なし |
| **認証済みユーザー** (新規ユーザー) | ログインしたが、まだ特定のグループに属していない者。 | 自身の**ルートアカウント**の管理。ユーザープロフィールの作成・管理。作品の登録・評価 | ルートアカウントID 、**所持ポイント**（ルートアカウントで一元管理） 。 |
| **グループのメンバー** | グループの一員として、リーダーと**ウォッチ以上の関係**にある者。 | 自身の投稿、作品の表現（投稿、編集、削除）。他の仲間の言葉や作品に触れること。自身のプロフィール情報の編集。**リーダーを評価**すること。 | 連続経過日数ポイント（リーダーがルール遵守を評価する指標、メンバーからは見えない）。 |
| **グループのリーダー** | グループのすべての責任を負う者。ユーザープロフィール作成時に自動でリーダーとなる 。 | グループ情報の編集（名前、ルールなど）。仲間の招待、承認、別れを告げること（メンバー管理）。メンバーに対するペナルティ（警告、リーブ、アナザーディメンションなど）を課す**全権限**。他のオアシスとの繋がり（それ以上のまとまり）への参加申請や離脱。 | - |
| **それ以上のまとまりのリーダー** | 複数のグループ（オアシス）が連結してできた全体をまとめる者。参加グループの**リーダーたち**によって構成される。 | まとまりの情報の編集。新しいグループの迎え入れや離脱。ルールの設定。 | - |




#### 2.2.8.2. 開発・運営側の役割

運営側の役割は、システム全体を維持します。

| 役割（ロール） | 概要と目的 | 主な権限（力）と責任 | 参照元 |
| :--- | :--- | :--- | :--- |
| **管理人** | 「masakinihirota」の世界全体を見守り、維持する者。管理ダッシュボード（優先度:小）を通じて操作を行う 。 | すべてのユーザーアカウントの管理。システム設定の変更。不適切な行為の監視と対応（コンテンツモデレーション）。すべてのログと情報へのアクセス。 | |
| **Super Admin** | すべての管理者権限を持つ。 | データベースを含む**すべてのデータにアクセス可能** 。 | |
| **User Support** | ユーザーからの問い合わせ対応、アカウント関連の問題解決を行う。 | - | |
| **開発** | 開発時における全アクセス権限、セキュリティ管理者。 | - | |
| **テスター** | テスター用アカウント。 | - | |
| **経理** | 経理関連の責任者。 | - | |



#### 2.2.8.3. 権限付与の基本設計

権限とアクセス制御は、以下の原則に基づいて行われます。

1.  **RBAC（ロールベースアクセス制御）の活用**：データベースレベルでは、Supabaseの**行レベルセキュリティ（RLS）**を活用し、各役割が「自分に関係のある情報や、見ることを許された情報だけ」にアクセスできるように制御します。
2.  **ルートアカウントによる集権管理**：ポイント（$$）は**ルートアカウントで一元管理**され、紐づくすべてのユーザープロフィールがこのポイントに依存します。
3.  **リーダーシップによる秩序維持**：コミュニティ運営の基本理念である「オアシス宣言」の遵守はリーダーに責任があり、リーダーはメンバーの「**連続経過日数ポイント**」をリセットするペナルティ権限を持ちます。



## 3. 機能要件

### 3.1 機能一覧

	アクセス権限
	RBAC グループと役割
	データベース設計
	役割
	RBAC マトリクス図
	テーブル定義書
	URL
	画面UI
	API設計書
	ルートアカウント
	ユーザープロフィール
	非機能要件
	セキュリティ設計書
	作品登録
	カテゴリとジャンル
	価値観のカテゴリ
	価値観登録
	タグ
	グループ関連
	評価
	スキル登録
	リスト
	マッチング
	自動マッチング
	手動マッチング
	メニュー
	通知
	検索、履歴
	チェーン
	マンダラチャート
	管理機能
	国際化
	国際化多言語対応設計書
	国際化多言語対応テスト計画書
	スマホ対応
	コメント
	見守り
	ペナルティ
	レコメンド
	チュートリアル
	広告関連
	サブスク



### 3.3 データ要件  アプリで扱う主要なデータの種類、項目、データ間の関係性（ER図など）を定義します。

別ファイルに記載



## 4. 非機能要件

別ファイルに記載

### 4.1 性能・拡張性  処理速度、同時アクセス数、将来的なデータ増加への対応などを定義します。  具体的な数値目標（例: 画面表示は3秒以内）を記載。

### 4.2 セキュリティ  認証方式、データ暗号化、不正アクセス対策、個人情報保護などを定義します。

### 4.3 信頼性・可用性  システム障害時の許容停止時間、バックアップ・リカバリの要件、稼働率などを定義します。

### 4.4 運用・保守性  リリース後のシステム監視方法、ログの取得、障害対応、将来的な機能追加や改修のしやすさなどを定義します。

### 4.5 ユーザビリティ・デザイン  画面レイアウト、操作性、レスポンシブ対応（PC/スマホ）など、ユーザーインターフェース（UI/UX）に関する要件を定義します。  ワイヤーフレームやデザインカンプなどを添付。

### 4.6 技術要件・環境  採用するプログラミング言語、データベース、OS、ブラウザ、連携システムなどを定義します。



## 5. プロジェクト要件

### 5.1 スケジュール概要  開発の主要なフェーズと、おおよその期間（マイルストーン）を記載します。

無し

### 5.2 予算

無し、必要経費見

### 5.3 納品物

Vercelで公開

### 5.4 制約事項  開発における技術的、予算的、納期的、法的などの制約条件を記載します。

無し



----------------------------------------

個別機能説明パート

※重要項目以外は別ファイルに記載に
機能ごとの要件定義書ファイルに書く

## 優先度:大

### 認証前

Supabaseのを活用

匿名認証	ゲストで対応

OAuth		新規ユーザーで対応
	Google
	GitHub

### 認証終了後

	初期設定モーダル（全リセット時のみ再設定可）
		地球3分割（1/2/3）/ 母語（複数）/ UI言語（ja/en）/ 生誕世代（around）/ オアシス宣誓（必須）/ 広告ON/OFF。
	完了後にルートアカウント作成（冪等upsert）。

	初回ボーナスあり
		初期ポイント3000(通常1000)
		信頼継続日数は30(通常0)

	リセットはいつでも初期状態に戻れる
	リスクなし(初回ボーナス無し)
	初期ポイント1000
	信頼継続日数0
	評価リセット
	警告リセット
	イエローカードリセット
	レッドカードリセット
	一度もアクセスがないとリセット


### 0012-アクセス権限

* ユーザー
	ゲスト/新規ユーザー	未登録、まだユーザープロフィールを作ってない者
	リーダー	グループのリーダー
	メンバー	グループのメンバー
	スポンサー	スポンサー用

* 開発
	管理人		Webアプリ運用時の権限
	テスター	テスター用
	開発		開発時における全アクセス権限、セキュリティ管理者
	経理		経理関連の責任者



### 0014-RBAC グループと役割

別ファイルに記載

### 0020-データベース設計

RBACを使う

Webアプリで必要なテーブルを作る
トリガーを使用するかどうか考える

### 0022-役割

	ゲスト/新規ユーザー
	リーダー
	メンバー
	スポンサー



### 0024-RBAC マトリクス図

別ファイルに記載

### 0026-テーブル定義書

各テーブルを定義する

### 0050-URL

URL設計書を読む

### 0054-画面UI

設計書よりAIにUIを考えてもらう

### 0056-API設計書

別ファイルに記載

### 0100-ルートアカウント
	1ユーザー=1ルート（UUID v4）。
	リセット（認証以外の全データ初期化、2段階確認）。
	ポイント表示のみ（消費/回復ロジックは未実装）。
	経過日数=作成日からの単純差分（カード運用なし）。

### 0110-ユーザープロフィール
	複数作成可（上限4、目的の重複不可: work/friend/marriage(1件のみ)/end_of_life/other）。
	項目: 名前（匿名可）、最新の状態（status: standby/open/exploring/closed）。
	作成時に自動で「自分のグループ」を生成し自分がリーダー。
	名刺/履歴書/フルの表示切替（データ構造共通）。
	既存作品から選択し tense(now/future/life) + tier(tier1/2/3/normal/not_for_me) を付与。
	登録済み価値観の選択肢を回答として付与。プロフィール間コピーは次フェーズ。

### 0200-非機能要件
	パフォーマンス: 主要API/SSRのP90 200ms以内（サーバー内計測、DBネットワーク除く）。
	セキュリティ: OAuth, RLS, 入力バリデーション（Zod）、XSS対策。
	信頼性: 99.9%目標（SaaS依存、Supabase標準バックアップ）。
	拡張性: モジュール化、スキーマ整備。
	ユーザビリティ: シンプルUI、A11y配慮、レスポンシブ、ネタバレ防止配慮。
	互換性: モダンブラウザ最新。
	テスト: statements>=80%, branches>=70%（暫定）。
	ログ最小: sign-in, onboarding complete, profile create, match compute（回数）。

### 0202-セキュリティ設計書

別ファイルに記載

### 0300-作品登録

別ファイルに記載

### 0310-カテゴリとジャンル

別ファイルに記載

### 0312-価値観のカテゴリ

別ファイルに記載

### 0314-価値観登録
	公式作品（~100件）は管理者シード。ユーザーは追加登録可（自身/将来はグループ限定可）。
	ユーザー登録作品はTier1-3のみ対象（normal/not_for_meは不可）。
	カテゴリ: anime | manga（MVP）。
	価値観は設問/選択肢モデル（label/option_text）。回答保存は profile_value_answers。is_importantを持つ。
	i18n列は後続。MVPは単一言語列。

### 0320-タグ

### 0400-グループ関連
	ルール: オアシス宣言のみ自動適用。
	関係語彙: watch/follow/friend/pre_partner/partner（MVPはwatch候補保存のみ）。

### 0500-評価

別ファイルに記載

### 0510-スキル登録

別ファイルに記載

### 0520-リスト

別ファイルに記載

### 0600-マッチング
	マッチングでスコア/ランクが表示される。
	価値観/作品を元に暫定スコア（0-100）を算出しランク表示（High/Medium/Low/Very Low）。
	素点構成例（抜粋）: 作品tier一致/不一致、価値観一致、重要フラグ加点、偏りペナルティ等。
	自動マッチング（候補保存）: デフォルト score>=75 を最大5人（MVPはローカル候補保存のみ）。
	手動マッチング: 候補一覧→選択→グループ追加（取消は次フェーズ）。

### 0610-自動マッチング

別ファイルに記載

### 0620-手動マッチング

別ファイルに記載

### 0700-メニュー

別ファイルに記載

### ## 優先度:中

### 0710-通知

別ファイルに記載

### 0720-検索、履歴

別ファイルに記載

### 0800-チェーン

別ファイルに記載

### 0810-マンダラチャート

別ファイルに記載

### 0900-管理機能

別ファイルに記載

### 1000-国際化
	言語切替: ja/en。
	ナビ: Header(Home/lang/dark/auth)、Side(ルート### /プロフィール/登録/マッチ)。
	非対応機能は「???」プレースホルダ。

### 1002-国際化多言語対応設計書

別ファイルに記載

### 1002-国際化多言語対応テスト計画書

別ファイルに記載

### ## 優先度:小

### 1010-スマホ対応

別ファイルに記載

### 1100-コメント

別ファイルに記載

### 1110-見守り

別ファイルに記載

### 1120-ペナルティ

別ファイルに記載

### 1200-レコメンド

別ファイルに記載

### 1210-チュートリアル

別ファイルに記載

### 1400-広告関連

別ファイルに記載

### 1410-サブスク

別ファイルに記載

